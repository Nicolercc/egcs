---
import { Image } from 'astro:assets';


const imageData = [
  { path: import('../assets/IMG_1647.jpg'), description: "Wall plaster removal" },
  { path: import('../assets/IMG_2453.jpg'), description: "Mold removal" },
  { path: import('../assets/IMG_2458.jpg'), description: "Confined Space" },
  { path: import('../assets/IMG_2470.jpg'), description: "Concentration of asbestos" },
  { path: import('../assets/IMG_3367.jpg'), description: "Pipe asbestos removal" },
  { path: import('../assets/IMG_3378.jpg'), description: "Pipe asbestos removal" },
  { path: import('../assets/IMG_3394.jpg'), description: "Pipe asbestos removal" },
  { path: import('../assets/IMG_3397.jpg'), description: "Tile mastic removal" },
  { path: import('../assets/IMG_3407.jpg'), description: "Wall plaster removal" },
  { path: import('../assets/IMG_5100.jpg'), description: "Floor mastic removal" },
  { path: import('../assets/IMG_5782.jpg'), description: "VAT & mastic removal" },
  { path: import('../assets/IMG_5834.jpg'), description: "mastic removal" },
  { path: import('../assets/IMG_9226.jpg'), description: "Pipe removal" },
  { path: import('../assets/IMG_9254.jpg'), description: "Pipe removal" },
  { path: import('../assets/IMG_9256.jpg'), description: "Pipe removal" },
  { path: import('../assets/img000.jpg'), description: "Mold removal" },
  { path: import('../assets/IMG_9184.jpg'), description: "Pipe asbestos removal" },
  { path: import('../assets/IMG_3602.jpg'), description: "Lead asbestos removal" },
  { path: import('../assets/IMG_3603.jpg'), description: "Lead asbestos removal" },
  { path: import('../assets/IMG_3586.jpg'), description: "Lead asbestos removal" },
  { path: import('../assets/IMG_3482.jpg'), description: "Lead paint removal" },
  { path: import('../assets/IMG_2389.jpg'), description: "Mold detection" },
  { path: import('../assets/IMG_2611.jpg'), description: "Roof asbestos removal" },
  { path: import('../assets/IMG_2599.jpg'), description: "Roof asbestos removal" },

];

const images = await Promise.all(
  imageData.map(async (item) => ({
    image: (await item.path).default,
    description: item.description
  }))
);
---

<div id="indicators-carousel" class="relative w-full my-4 md:my-0" data-carousel="static">
    <!-- Carousel wrapper -->
    <div class="relative h-56 overflow-hidden rounded-lg md:h-[300px]">
        {images.map((item, index) => (
            <div class={"absolute block w-full h-full transition-opacity duration-700 ease-in-out " + (index === 0 ? "opacity-100" : "opacity-0")} data-carousel-item>
                <Image src={item.image} alt={ item.description ||`Slide ${index + 1}`} class="absolute w-full h-auto top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2" />
                <div class="absolute bottom-0 left-0 right-0 bg-black bg-opacity-50 text-white p-4 text-center">
                    <p class="text-sm md:text-base">{item.description}</p>
                </div>
            </div>
        ))}
    </div>
    
   
    
    <!-- Slider controls -->
    <button type="button" class="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" data-carousel-prev>
        <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70">
            <svg class="w-4 h-4 text-white dark:text-gray-800 rtl:rotate-180" viewBox="0 0 6 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/>
            </svg>
            <span class="sr-only">Previous</span>
        </span>
    </button>
    <button type="button" class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" data-carousel-next>
        <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 dark:bg-gray-800/30 group-hover:bg-white/50 dark:group-hover:bg-gray-800/60 group-focus:ring-4 group-focus:ring-white dark:group-focus:ring-gray-800/70">
            <svg class="w-4 h-4 text-white dark:text-gray-800" viewBox="0 0 6 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
            </svg>
            <span class="sr-only">Next</span>
        </span>
    </button>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const carousel = document.getElementById('indicators-carousel');
        if (!carousel) return; // Early return if el not found

        const items = carousel.querySelectorAll('[data-carousel-item]');
        const indicators = carousel.querySelectorAll('[data-carousel-slide-to]');
        let currentIndex = 0;

        function showSlide(index: number): void {
            // Hide all slides
            items.forEach(item => {
                item.classList.remove('opacity-100');
                item.classList.add('opacity-0');
            });
            
            // Show current slide
            items[index].classList.remove('opacity-0');
            items[index].classList.add('opacity-100');
            
            // Update indicators
            indicators.forEach(indicator => {
                indicator.classList.remove('bg-white');
                indicator.classList.add('bg-white/30');
            });
            if (indicators[index]) {
                indicators[index].classList.remove('bg-white/30');
                indicators[index].classList.add('bg-white');
            }
        }

        function nextSlide(): void {
            currentIndex = (currentIndex + 1) % items.length;
            showSlide(currentIndex);
        }

        function previousSlide(): void {
            currentIndex = (currentIndex - 1 + items.length) % items.length;
            showSlide(currentIndex);
        }

        // Add click events for next/previous buttons
        const nextButton = carousel.querySelector('[data-carousel-next]');
        const prevButton = carousel.querySelector('[data-carousel-prev]');

        if (nextButton) {
            nextButton.addEventListener('click', nextSlide);
        }
        if (prevButton) {
            prevButton.addEventListener('click', previousSlide);
        }

        // Add click events for indicators
        indicators.forEach((indicator, index) => {
            indicator.addEventListener('click', () => {
                currentIndex = index;
                showSlide(currentIndex);
            });
        });

        // Optional: Auto-play
        const autoPlayInterval = setInterval(nextSlide, 5000);

        // Clean up interval on page leave
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                clearInterval(autoPlayInterval);
            }
        });
    });
</script>
